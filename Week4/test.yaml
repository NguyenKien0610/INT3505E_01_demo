openapi: 3.0.0
info:
  title: Book Management API
  version: 1.0.0
  description: >
    API quản lý sách trong thư viện.  
    ✅ Mỗi request là **stateless** — server không lưu session, mọi xác thực được gửi qua JWT token.  
    ✅ Dùng Swagger UI để thử nghiệm trực tiếp các endpoint.

servers:
  - url: http://localhost:5000/api

paths:
  /login:
    post:
      summary: Đăng nhập và nhận JWT token
      description: Gửi username và password để nhận token cho các request cần xác thực.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: "123"
      responses:
        '200':
          description: Trả về token JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Sai thông tin đăng nhập

  /books:
    get:
      summary: Lấy danh sách tất cả sách
      parameters:
        - name: author
          in: query
          description: Lọc theo tác giả
          required: false
          schema:
            type: string
            example: "Robert C. Martin"
        - name: limit
          in: query
          description: Giới hạn số lượng sách trả về
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Danh sách sách
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    post:
      summary: Thêm sách mới
      description: Cần token xác thực qua Bearer JWT.
      security:
        - BearerAuth: []   # yêu cầu token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Tạo thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          description: Thiếu hoặc token không hợp lệ

  /books/{id}:
    get:
      summary: Lấy thông tin sách theo ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Thông tin sách
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Không tìm thấy

    put:
      summary: Cập nhật thông tin sách
      description: Cần token xác thực qua Bearer JWT.
      security:
        - BearerAuth: []   # yêu cầu token
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Cập nhật thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '401':
          description: Thiếu hoặc token không hợp lệ

    delete:
      summary: Xóa sách theo ID
      description: Cần token xác thực qua Bearer JWT.
      security:
        - BearerAuth: []   # yêu cầu token
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Xóa thành công
        '401':
          description: Thiếu hoặc token không hợp lệ

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Clean Code
        author:
          type: string
          example: Robert C. Martin
        year:
          type: integer
          example: 2008

    BookInput:
      type: object
      required: [title, author, year]
      properties:
        title:
          type: string
          example: "New Book"
        author:
          type: string
          example: "Nguyen Kien"
        year:
          type: integer
          example: 2025

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
